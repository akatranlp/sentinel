// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package types

import (
	"errors"
	"fmt"
)

const (
	// MessageTypeInfo is a MessageType of type info.
	MessageTypeInfo MessageType = "info"
	// MessageTypeSuccess is a MessageType of type success.
	MessageTypeSuccess MessageType = "success"
	// MessageTypeError is a MessageType of type error.
	MessageTypeError MessageType = "error"
	// MessageTypeWarning is a MessageType of type warning.
	MessageTypeWarning MessageType = "warning"
)

var ErrInvalidMessageType = errors.New("not a valid MessageType")

// MessageTypeValues returns a list of the values for MessageType
func MessageTypeValues() []MessageType {
	return []MessageType{
		MessageTypeInfo,
		MessageTypeSuccess,
		MessageTypeError,
		MessageTypeWarning,
	}
}

// String implements the Stringer interface.
func (x MessageType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MessageType) IsValid() bool {
	_, err := ParseMessageType(string(x))
	return err == nil
}

var _MessageTypeValue = map[string]MessageType{
	"info":    MessageTypeInfo,
	"success": MessageTypeSuccess,
	"error":   MessageTypeError,
	"warning": MessageTypeWarning,
}

// ParseMessageType attempts to convert a string to a MessageType.
func ParseMessageType(name string) (MessageType, error) {
	if x, ok := _MessageTypeValue[name]; ok {
		return x, nil
	}
	return MessageType(""), fmt.Errorf("%s is %w", name, ErrInvalidMessageType)
}

// MarshalText implements the text marshaller method.
func (x MessageType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MessageType) UnmarshalText(text []byte) error {
	tmp, err := ParseMessageType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// PageIDLogintmpl is a PageID of type login.tmpl.
	PageIDLogintmpl PageID = "login.tmpl"
	// PageIDErrortmpl is a PageID of type error.tmpl.
	PageIDErrortmpl PageID = "error.tmpl"
	// PageIDInfotmpl is a PageID of type info.tmpl.
	PageIDInfotmpl PageID = "info.tmpl"
	// PageIDFormRedirecttmpl is a PageID of type form-redirect.tmpl.
	PageIDFormRedirecttmpl PageID = "form-redirect.tmpl"
	// PageIDFormPosttmpl is a PageID of type form-post.tmpl.
	PageIDFormPosttmpl PageID = "form-post.tmpl"
	// PageIDUsertmpl is a PageID of type user.tmpl.
	PageIDUsertmpl PageID = "user.tmpl"
	// PageIDUserEdittmpl is a PageID of type user-edit.tmpl.
	PageIDUserEdittmpl PageID = "user-edit.tmpl"
	// PageIDLogouttmpl is a PageID of type logout.tmpl.
	PageIDLogouttmpl PageID = "logout.tmpl"
)

var ErrInvalidPageID = errors.New("not a valid PageID")

// PageIDValues returns a list of the values for PageID
func PageIDValues() []PageID {
	return []PageID{
		PageIDLogintmpl,
		PageIDErrortmpl,
		PageIDInfotmpl,
		PageIDFormRedirecttmpl,
		PageIDFormPosttmpl,
		PageIDUsertmpl,
		PageIDUserEdittmpl,
		PageIDLogouttmpl,
	}
}

// String implements the Stringer interface.
func (x PageID) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PageID) IsValid() bool {
	_, err := ParsePageID(string(x))
	return err == nil
}

var _PageIDValue = map[string]PageID{
	"login.tmpl":         PageIDLogintmpl,
	"error.tmpl":         PageIDErrortmpl,
	"info.tmpl":          PageIDInfotmpl,
	"form-redirect.tmpl": PageIDFormRedirecttmpl,
	"form-post.tmpl":     PageIDFormPosttmpl,
	"user.tmpl":          PageIDUsertmpl,
	"user-edit.tmpl":     PageIDUserEdittmpl,
	"logout.tmpl":        PageIDLogouttmpl,
}

// ParsePageID attempts to convert a string to a PageID.
func ParsePageID(name string) (PageID, error) {
	if x, ok := _PageIDValue[name]; ok {
		return x, nil
	}
	return PageID(""), fmt.Errorf("%s is %w", name, ErrInvalidPageID)
}

// MarshalText implements the text marshaller method.
func (x PageID) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *PageID) UnmarshalText(text []byte) error {
	tmp, err := ParsePageID(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// TokenResponseFieldState is a TokenResponseField of type state.
	TokenResponseFieldState TokenResponseField = "state"
	// TokenResponseFieldCode is a TokenResponseField of type code.
	TokenResponseFieldCode TokenResponseField = "code"
	// TokenResponseFieldIdToken is a TokenResponseField of type id_token.
	TokenResponseFieldIdToken TokenResponseField = "id_token"
	// TokenResponseFieldAccessToken is a TokenResponseField of type access_token.
	TokenResponseFieldAccessToken TokenResponseField = "access_token"
	// TokenResponseFieldExpiresIn is a TokenResponseField of type expires_in.
	TokenResponseFieldExpiresIn TokenResponseField = "expires_in"
	// TokenResponseFieldRefreshToken is a TokenResponseField of type refresh_token.
	TokenResponseFieldRefreshToken TokenResponseField = "refresh_token"
	// TokenResponseFieldRefreshExpiresIn is a TokenResponseField of type refresh_expires_in.
	TokenResponseFieldRefreshExpiresIn TokenResponseField = "refresh_expires_in"
	// TokenResponseFieldTokenType is a TokenResponseField of type token_type.
	TokenResponseFieldTokenType TokenResponseField = "token_type"
)

var ErrInvalidTokenResponseField = errors.New("not a valid TokenResponseField")

// TokenResponseFieldValues returns a list of the values for TokenResponseField
func TokenResponseFieldValues() []TokenResponseField {
	return []TokenResponseField{
		TokenResponseFieldState,
		TokenResponseFieldCode,
		TokenResponseFieldIdToken,
		TokenResponseFieldAccessToken,
		TokenResponseFieldExpiresIn,
		TokenResponseFieldRefreshToken,
		TokenResponseFieldRefreshExpiresIn,
		TokenResponseFieldTokenType,
	}
}

// String implements the Stringer interface.
func (x TokenResponseField) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TokenResponseField) IsValid() bool {
	_, err := ParseTokenResponseField(string(x))
	return err == nil
}

var _TokenResponseFieldValue = map[string]TokenResponseField{
	"state":              TokenResponseFieldState,
	"code":               TokenResponseFieldCode,
	"id_token":           TokenResponseFieldIdToken,
	"access_token":       TokenResponseFieldAccessToken,
	"expires_in":         TokenResponseFieldExpiresIn,
	"refresh_token":      TokenResponseFieldRefreshToken,
	"refresh_expires_in": TokenResponseFieldRefreshExpiresIn,
	"token_type":         TokenResponseFieldTokenType,
}

// ParseTokenResponseField attempts to convert a string to a TokenResponseField.
func ParseTokenResponseField(name string) (TokenResponseField, error) {
	if x, ok := _TokenResponseFieldValue[name]; ok {
		return x, nil
	}
	return TokenResponseField(""), fmt.Errorf("%s is %w", name, ErrInvalidTokenResponseField)
}

// MarshalText implements the text marshaller method.
func (x TokenResponseField) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TokenResponseField) UnmarshalText(text []byte) error {
	tmp, err := ParseTokenResponseField(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
