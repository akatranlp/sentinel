// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package openid

import (
	"errors"
	"fmt"
)

const (
	// TokenErrorTypeInvalidRequest is a TokenErrorType of type invalid_request.
	TokenErrorTypeInvalidRequest TokenErrorType = "invalid_request"
	// TokenErrorTypeInvalidClient is a TokenErrorType of type invalid_client.
	TokenErrorTypeInvalidClient TokenErrorType = "invalid_client"
	// TokenErrorTypeInvalidGrant is a TokenErrorType of type invalid_grant.
	TokenErrorTypeInvalidGrant TokenErrorType = "invalid_grant"
	// TokenErrorTypeUnauthorizedClient is a TokenErrorType of type unauthorized_client.
	TokenErrorTypeUnauthorizedClient TokenErrorType = "unauthorized_client"
	// TokenErrorTypeUnsupportedGrantType is a TokenErrorType of type unsupported_grant_type.
	TokenErrorTypeUnsupportedGrantType TokenErrorType = "unsupported_grant_type"
	// TokenErrorTypeInvalidScope is a TokenErrorType of type invalid_scope.
	TokenErrorTypeInvalidScope TokenErrorType = "invalid_scope"
	// TokenErrorTypeServerError is a TokenErrorType of type server_error.
	TokenErrorTypeServerError TokenErrorType = "server_error"
	// TokenErrorTypeInvalidTarget is a TokenErrorType of type invalid_target.
	TokenErrorTypeInvalidTarget TokenErrorType = "invalid_target"
)

var ErrInvalidTokenErrorType = errors.New("not a valid TokenErrorType")

// String implements the Stringer interface.
func (x TokenErrorType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TokenErrorType) IsValid() bool {
	_, err := ParseTokenErrorType(string(x))
	return err == nil
}

var _TokenErrorTypeValue = map[string]TokenErrorType{
	"invalid_request":        TokenErrorTypeInvalidRequest,
	"invalid_client":         TokenErrorTypeInvalidClient,
	"invalid_grant":          TokenErrorTypeInvalidGrant,
	"unauthorized_client":    TokenErrorTypeUnauthorizedClient,
	"unsupported_grant_type": TokenErrorTypeUnsupportedGrantType,
	"invalid_scope":          TokenErrorTypeInvalidScope,
	"server_error":           TokenErrorTypeServerError,
	"invalid_target":         TokenErrorTypeInvalidTarget,
}

// ParseTokenErrorType attempts to convert a string to a TokenErrorType.
func ParseTokenErrorType(name string) (TokenErrorType, error) {
	if x, ok := _TokenErrorTypeValue[name]; ok {
		return x, nil
	}
	return TokenErrorType(""), fmt.Errorf("%s is %w", name, ErrInvalidTokenErrorType)
}

// MarshalText implements the text marshaller method.
func (x TokenErrorType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TokenErrorType) UnmarshalText(text []byte) error {
	tmp, err := ParseTokenErrorType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// TokenFormValueClientId is a TokenFormValue of type client_id.
	TokenFormValueClientId TokenFormValue = "client_id"
	// TokenFormValueClientSecret is a TokenFormValue of type client_secret.
	TokenFormValueClientSecret TokenFormValue = "client_secret"
	// TokenFormValueRedirectUri is a TokenFormValue of type redirect_uri.
	TokenFormValueRedirectUri TokenFormValue = "redirect_uri"
	// TokenFormValueGrantType is a TokenFormValue of type grant_type.
	TokenFormValueGrantType TokenFormValue = "grant_type"
	// TokenFormValueCode is a TokenFormValue of type code.
	TokenFormValueCode TokenFormValue = "code"
	// TokenFormValueCodeVerifier is a TokenFormValue of type code_verifier.
	TokenFormValueCodeVerifier TokenFormValue = "code_verifier"
	// TokenFormValueScope is a TokenFormValue of type scope.
	TokenFormValueScope TokenFormValue = "scope"
	// TokenFormValueRefreshToken is a TokenFormValue of type refresh_token.
	TokenFormValueRefreshToken TokenFormValue = "refresh_token"
	// TokenFormValueRequestedTokenType is a TokenFormValue of type requested_token_type.
	TokenFormValueRequestedTokenType TokenFormValue = "requested_token_type"
	// TokenFormValueRequestedIssuer is a TokenFormValue of type requested_issuer.
	TokenFormValueRequestedIssuer TokenFormValue = "requested_issuer"
	// TokenFormValueSubjectToken is a TokenFormValue of type subject_token.
	TokenFormValueSubjectToken TokenFormValue = "subject_token"
	// TokenFormValueSubjectTokenType is a TokenFormValue of type subject_token_type.
	TokenFormValueSubjectTokenType TokenFormValue = "subject_token_type"
	// TokenFormValueTokenExchangeSecret is a TokenFormValue of type __token_exchange_secret__.
	TokenFormValueTokenExchangeSecret TokenFormValue = "__token_exchange_secret__"
)

var ErrInvalidTokenFormValue = errors.New("not a valid TokenFormValue")

// String implements the Stringer interface.
func (x TokenFormValue) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TokenFormValue) IsValid() bool {
	_, err := ParseTokenFormValue(string(x))
	return err == nil
}

var _TokenFormValueValue = map[string]TokenFormValue{
	"client_id":                 TokenFormValueClientId,
	"client_secret":             TokenFormValueClientSecret,
	"redirect_uri":              TokenFormValueRedirectUri,
	"grant_type":                TokenFormValueGrantType,
	"code":                      TokenFormValueCode,
	"code_verifier":             TokenFormValueCodeVerifier,
	"scope":                     TokenFormValueScope,
	"refresh_token":             TokenFormValueRefreshToken,
	"requested_token_type":      TokenFormValueRequestedTokenType,
	"requested_issuer":          TokenFormValueRequestedIssuer,
	"subject_token":             TokenFormValueSubjectToken,
	"subject_token_type":        TokenFormValueSubjectTokenType,
	"__token_exchange_secret__": TokenFormValueTokenExchangeSecret,
}

// ParseTokenFormValue attempts to convert a string to a TokenFormValue.
func ParseTokenFormValue(name string) (TokenFormValue, error) {
	if x, ok := _TokenFormValueValue[name]; ok {
		return x, nil
	}
	return TokenFormValue(""), fmt.Errorf("%s is %w", name, ErrInvalidTokenFormValue)
}

// MarshalText implements the text marshaller method.
func (x TokenFormValue) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TokenFormValue) UnmarshalText(text []byte) error {
	tmp, err := ParseTokenFormValue(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
