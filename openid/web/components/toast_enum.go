// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package components

import (
	"errors"
	"fmt"
)

const (
	// ToastVariantError is a ToastVariant of type error.
	ToastVariantError ToastVariant = "error"
	// ToastVariantWarning is a ToastVariant of type warning.
	ToastVariantWarning ToastVariant = "warning"
	// ToastVariantPending is a ToastVariant of type pending.
	ToastVariantPending ToastVariant = "pending"
)

var ErrInvalidToastVariant = errors.New("not a valid ToastVariant")

// String implements the Stringer interface.
func (x ToastVariant) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ToastVariant) IsValid() bool {
	_, err := ParseToastVariant(string(x))
	return err == nil
}

var _ToastVariantValue = map[string]ToastVariant{
	"error":   ToastVariantError,
	"warning": ToastVariantWarning,
	"pending": ToastVariantPending,
}

// ParseToastVariant attempts to convert a string to a ToastVariant.
func ParseToastVariant(name string) (ToastVariant, error) {
	if x, ok := _ToastVariantValue[name]; ok {
		return x, nil
	}
	return ToastVariant(""), fmt.Errorf("%s is %w", name, ErrInvalidToastVariant)
}

// MarshalText implements the text marshaller method.
func (x ToastVariant) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ToastVariant) UnmarshalText(text []byte) error {
	tmp, err := ParseToastVariant(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
