// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// PromptNone is a Prompt of type none.
	PromptNone Prompt = "none"
	// PromptLogin is a Prompt of type login.
	PromptLogin Prompt = "login"
	// PromptConsent is a Prompt of type consent.
	PromptConsent Prompt = "consent"
)

var ErrInvalidPrompt = errors.New("not a valid Prompt")

// PromptValues returns a list of the values for Prompt
func PromptValues() []Prompt {
	return []Prompt{
		PromptNone,
		PromptLogin,
		PromptConsent,
	}
}

// String implements the Stringer interface.
func (x Prompt) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Prompt) IsValid() bool {
	_, err := ParsePrompt(string(x))
	return err == nil
}

var _PromptValue = map[string]Prompt{
	"none":    PromptNone,
	"login":   PromptLogin,
	"consent": PromptConsent,
}

// ParsePrompt attempts to convert a string to a Prompt.
func ParsePrompt(name string) (Prompt, error) {
	if x, ok := _PromptValue[name]; ok {
		return x, nil
	}
	return Prompt(""), fmt.Errorf("%s is %w", name, ErrInvalidPrompt)
}

// MarshalText implements the text marshaller method.
func (x Prompt) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Prompt) UnmarshalText(text []byte) error {
	tmp, err := ParsePrompt(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
