// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// ClaimIss is a Claim of type iss.
	ClaimIss Claim = "iss"
	// ClaimSub is a Claim of type sub.
	ClaimSub Claim = "sub"
	// ClaimAud is a Claim of type aud.
	ClaimAud Claim = "aud"
	// ClaimJti is a Claim of type jti.
	ClaimJti Claim = "jti"
	// ClaimSid is a Claim of type sid.
	ClaimSid Claim = "sid"
	// ClaimExp is a Claim of type exp.
	ClaimExp Claim = "exp"
	// ClaimIat is a Claim of type iat.
	ClaimIat Claim = "iat"
	// ClaimNbf is a Claim of type nbf.
	ClaimNbf Claim = "nbf"
	// ClaimName is a Claim of type name.
	ClaimName Claim = "name"
	// ClaimNickname is a Claim of type nickname.
	ClaimNickname Claim = "nickname"
	// ClaimPreferredUsername is a Claim of type preferred_username.
	ClaimPreferredUsername Claim = "preferred_username"
	// ClaimEmail is a Claim of type email.
	ClaimEmail Claim = "email"
	// ClaimEmailVerified is a Claim of type email_verified.
	ClaimEmailVerified Claim = "email_verified"
	// ClaimProfile is a Claim of type profile.
	ClaimProfile Claim = "profile"
	// ClaimPicture is a Claim of type picture.
	ClaimPicture Claim = "picture"
	// ClaimScope is a Claim of type scope.
	ClaimScope Claim = "scope"
	// ClaimAtHash is a Claim of type at_hash.
	ClaimAtHash Claim = "at_hash"
	// ClaimNonce is a Claim of type nonce.
	ClaimNonce Claim = "nonce"
	// ClaimAuthTime is a Claim of type auth_time.
	ClaimAuthTime Claim = "auth_time"
	// ClaimTokenType is a Claim of type token_type.
	ClaimTokenType Claim = "tt"
)

var ErrInvalidClaim = errors.New("not a valid Claim")

// ClaimValues returns a list of the values for Claim
func ClaimValues() []Claim {
	return []Claim{
		ClaimIss,
		ClaimSub,
		ClaimAud,
		ClaimJti,
		ClaimSid,
		ClaimExp,
		ClaimIat,
		ClaimNbf,
		ClaimName,
		ClaimNickname,
		ClaimPreferredUsername,
		ClaimEmail,
		ClaimEmailVerified,
		ClaimProfile,
		ClaimPicture,
		ClaimScope,
		ClaimAtHash,
		ClaimNonce,
		ClaimAuthTime,
		ClaimTokenType,
	}
}

// String implements the Stringer interface.
func (x Claim) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Claim) IsValid() bool {
	_, err := ParseClaim(string(x))
	return err == nil
}

var _ClaimValue = map[string]Claim{
	"iss":                ClaimIss,
	"sub":                ClaimSub,
	"aud":                ClaimAud,
	"jti":                ClaimJti,
	"sid":                ClaimSid,
	"exp":                ClaimExp,
	"iat":                ClaimIat,
	"nbf":                ClaimNbf,
	"name":               ClaimName,
	"nickname":           ClaimNickname,
	"preferred_username": ClaimPreferredUsername,
	"email":              ClaimEmail,
	"email_verified":     ClaimEmailVerified,
	"profile":            ClaimProfile,
	"picture":            ClaimPicture,
	"scope":              ClaimScope,
	"at_hash":            ClaimAtHash,
	"nonce":              ClaimNonce,
	"auth_time":          ClaimAuthTime,
	"tt":                 ClaimTokenType,
}

// ParseClaim attempts to convert a string to a Claim.
func ParseClaim(name string) (Claim, error) {
	if x, ok := _ClaimValue[name]; ok {
		return x, nil
	}
	return Claim(""), fmt.Errorf("%s is %w", name, ErrInvalidClaim)
}

// MarshalText implements the text marshaller method.
func (x Claim) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Claim) UnmarshalText(text []byte) error {
	tmp, err := ParseClaim(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
