// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// ScopeOpenid is a Scope of type openid.
	ScopeOpenid Scope = "openid"
	// ScopeProfile is a Scope of type profile.
	ScopeProfile Scope = "profile"
	// ScopeEmail is a Scope of type email.
	ScopeEmail Scope = "email"
	// ScopeOfflineAccess is a Scope of type offline_access.
	ScopeOfflineAccess Scope = "offline_access"
	// ScopeApi is a Scope of type api.
	ScopeApi Scope = "api"
)

var ErrInvalidScope = errors.New("not a valid Scope")

// ScopeValues returns a list of the values for Scope
func ScopeValues() []Scope {
	return []Scope{
		ScopeOpenid,
		ScopeProfile,
		ScopeEmail,
		ScopeOfflineAccess,
		ScopeApi,
	}
}

// String implements the Stringer interface.
func (x Scope) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Scope) IsValid() bool {
	_, err := ParseScope(string(x))
	return err == nil
}

var _ScopeValue = map[string]Scope{
	"openid":         ScopeOpenid,
	"profile":        ScopeProfile,
	"email":          ScopeEmail,
	"offline_access": ScopeOfflineAccess,
	"api":            ScopeApi,
}

// ParseScope attempts to convert a string to a Scope.
func ParseScope(name string) (Scope, error) {
	if x, ok := _ScopeValue[name]; ok {
		return x, nil
	}
	return Scope(""), fmt.Errorf("%s is %w", name, ErrInvalidScope)
}

// MarshalText implements the text marshaller method.
func (x Scope) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Scope) UnmarshalText(text []byte) error {
	tmp, err := ParseScope(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
