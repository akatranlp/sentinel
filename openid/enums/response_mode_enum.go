// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// ResponseModeQuery is a ResponseMode of type query.
	ResponseModeQuery ResponseMode = "query"
	// ResponseModeFragment is a ResponseMode of type fragment.
	ResponseModeFragment ResponseMode = "fragment"
	// ResponseModeFormPost is a ResponseMode of type form_post.
	ResponseModeFormPost ResponseMode = "form_post"
)

var ErrInvalidResponseMode = errors.New("not a valid ResponseMode")

// ResponseModeValues returns a list of the values for ResponseMode
func ResponseModeValues() []ResponseMode {
	return []ResponseMode{
		ResponseModeQuery,
		ResponseModeFragment,
		ResponseModeFormPost,
	}
}

// String implements the Stringer interface.
func (x ResponseMode) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ResponseMode) IsValid() bool {
	_, err := ParseResponseMode(string(x))
	return err == nil
}

var _ResponseModeValue = map[string]ResponseMode{
	"query":     ResponseModeQuery,
	"fragment":  ResponseModeFragment,
	"form_post": ResponseModeFormPost,
}

// ParseResponseMode attempts to convert a string to a ResponseMode.
func ParseResponseMode(name string) (ResponseMode, error) {
	if x, ok := _ResponseModeValue[name]; ok {
		return x, nil
	}
	return ResponseMode(""), fmt.Errorf("%s is %w", name, ErrInvalidResponseMode)
}

// MarshalText implements the text marshaller method.
func (x ResponseMode) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ResponseMode) UnmarshalText(text []byte) error {
	tmp, err := ParseResponseMode(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
