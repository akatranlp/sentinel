// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// DisplayPage is a Display of type page.
	DisplayPage Display = "page"
	// DisplayPopup is a Display of type popup.
	DisplayPopup Display = "popup"
	// DisplayTouch is a Display of type touch.
	DisplayTouch Display = "touch"
	// DisplayWap is a Display of type wap.
	DisplayWap Display = "wap"
)

var ErrInvalidDisplay = errors.New("not a valid Display")

// DisplayValues returns a list of the values for Display
func DisplayValues() []Display {
	return []Display{
		DisplayPage,
		DisplayPopup,
		DisplayTouch,
		DisplayWap,
	}
}

// String implements the Stringer interface.
func (x Display) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Display) IsValid() bool {
	_, err := ParseDisplay(string(x))
	return err == nil
}

var _DisplayValue = map[string]Display{
	"page":  DisplayPage,
	"popup": DisplayPopup,
	"touch": DisplayTouch,
	"wap":   DisplayWap,
}

// ParseDisplay attempts to convert a string to a Display.
func ParseDisplay(name string) (Display, error) {
	if x, ok := _DisplayValue[name]; ok {
		return x, nil
	}
	return Display(""), fmt.Errorf("%s is %w", name, ErrInvalidDisplay)
}

// MarshalText implements the text marshaller method.
func (x Display) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Display) UnmarshalText(text []byte) error {
	tmp, err := ParseDisplay(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
