// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// OauthTokenTypeAccessToken is a OauthTokenType of type access_token.
	OauthTokenTypeAccessToken OauthTokenType = "urn:ietf:params:oauth:token-type:access_token"
	// OauthTokenTypeRefreshToken is a OauthTokenType of type refresh_token.
	OauthTokenTypeRefreshToken OauthTokenType = "urn:ietf:params:oauth:token-type:refresh_token"
	// OauthTokenTypeIdToken is a OauthTokenType of type id_token.
	OauthTokenTypeIdToken OauthTokenType = "urn:ietf:params:oauth:token-type:id_token"
)

var ErrInvalidOauthTokenType = errors.New("not a valid OauthTokenType")

// OauthTokenTypeValues returns a list of the values for OauthTokenType
func OauthTokenTypeValues() []OauthTokenType {
	return []OauthTokenType{
		OauthTokenTypeAccessToken,
		OauthTokenTypeRefreshToken,
		OauthTokenTypeIdToken,
	}
}

// String implements the Stringer interface.
func (x OauthTokenType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OauthTokenType) IsValid() bool {
	_, err := ParseOauthTokenType(string(x))
	return err == nil
}

var _OauthTokenTypeValue = map[string]OauthTokenType{
	"urn:ietf:params:oauth:token-type:access_token":  OauthTokenTypeAccessToken,
	"urn:ietf:params:oauth:token-type:refresh_token": OauthTokenTypeRefreshToken,
	"urn:ietf:params:oauth:token-type:id_token":      OauthTokenTypeIdToken,
}

// ParseOauthTokenType attempts to convert a string to a OauthTokenType.
func ParseOauthTokenType(name string) (OauthTokenType, error) {
	if x, ok := _OauthTokenTypeValue[name]; ok {
		return x, nil
	}
	return OauthTokenType(""), fmt.Errorf("%s is %w", name, ErrInvalidOauthTokenType)
}

// MarshalText implements the text marshaller method.
func (x OauthTokenType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *OauthTokenType) UnmarshalText(text []byte) error {
	tmp, err := ParseOauthTokenType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
