// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// CodeChallengeMethodPlain is a CodeChallengeMethod of type plain.
	CodeChallengeMethodPlain CodeChallengeMethod = "plain"
	// CodeChallengeMethodS256 is a CodeChallengeMethod of type S256.
	CodeChallengeMethodS256 CodeChallengeMethod = "S256"
)

var ErrInvalidCodeChallengeMethod = errors.New("not a valid CodeChallengeMethod")

// CodeChallengeMethodValues returns a list of the values for CodeChallengeMethod
func CodeChallengeMethodValues() []CodeChallengeMethod {
	return []CodeChallengeMethod{
		CodeChallengeMethodPlain,
		CodeChallengeMethodS256,
	}
}

// String implements the Stringer interface.
func (x CodeChallengeMethod) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CodeChallengeMethod) IsValid() bool {
	_, err := ParseCodeChallengeMethod(string(x))
	return err == nil
}

var _CodeChallengeMethodValue = map[string]CodeChallengeMethod{
	"plain": CodeChallengeMethodPlain,
	"S256":  CodeChallengeMethodS256,
}

// ParseCodeChallengeMethod attempts to convert a string to a CodeChallengeMethod.
func ParseCodeChallengeMethod(name string) (CodeChallengeMethod, error) {
	if x, ok := _CodeChallengeMethodValue[name]; ok {
		return x, nil
	}
	return CodeChallengeMethod(""), fmt.Errorf("%s is %w", name, ErrInvalidCodeChallengeMethod)
}

// MarshalText implements the text marshaller method.
func (x CodeChallengeMethod) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CodeChallengeMethod) UnmarshalText(text []byte) error {
	tmp, err := ParseCodeChallengeMethod(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
