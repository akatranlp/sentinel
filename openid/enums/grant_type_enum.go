// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// GrantTypeAuthorizationCode is a GrantType of type authorization_code.
	GrantTypeAuthorizationCode GrantType = "authorization_code"
	// GrantTypeRefreshToken is a GrantType of type refresh_token.
	GrantTypeRefreshToken GrantType = "refresh_token"
	// GrantTypeTokenExchange is a GrantType of type token_exchange.
	GrantTypeTokenExchange GrantType = "urn:ietf:params:oauth:grant-type:token-exchange"
)

var ErrInvalidGrantType = errors.New("not a valid GrantType")

// GrantTypeValues returns a list of the values for GrantType
func GrantTypeValues() []GrantType {
	return []GrantType{
		GrantTypeAuthorizationCode,
		GrantTypeRefreshToken,
		GrantTypeTokenExchange,
	}
}

// String implements the Stringer interface.
func (x GrantType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x GrantType) IsValid() bool {
	_, err := ParseGrantType(string(x))
	return err == nil
}

var _GrantTypeValue = map[string]GrantType{
	"authorization_code": GrantTypeAuthorizationCode,
	"refresh_token":      GrantTypeRefreshToken,
	"urn:ietf:params:oauth:grant-type:token-exchange": GrantTypeTokenExchange,
}

// ParseGrantType attempts to convert a string to a GrantType.
func ParseGrantType(name string) (GrantType, error) {
	if x, ok := _GrantTypeValue[name]; ok {
		return x, nil
	}
	return GrantType(""), fmt.Errorf("%s is %w", name, ErrInvalidGrantType)
}

// MarshalText implements the text marshaller method.
func (x GrantType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *GrantType) UnmarshalText(text []byte) error {
	tmp, err := ParseGrantType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
