// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// EndpointAuthMethodClientSecretBasic is a EndpointAuthMethod of type client_secret_basic.
	EndpointAuthMethodClientSecretBasic EndpointAuthMethod = "client_secret_basic"
	// EndpointAuthMethodClientSecretPost is a EndpointAuthMethod of type client_secret_post.
	EndpointAuthMethodClientSecretPost EndpointAuthMethod = "client_secret_post"
)

var ErrInvalidEndpointAuthMethod = errors.New("not a valid EndpointAuthMethod")

// EndpointAuthMethodValues returns a list of the values for EndpointAuthMethod
func EndpointAuthMethodValues() []EndpointAuthMethod {
	return []EndpointAuthMethod{
		EndpointAuthMethodClientSecretBasic,
		EndpointAuthMethodClientSecretPost,
	}
}

// String implements the Stringer interface.
func (x EndpointAuthMethod) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x EndpointAuthMethod) IsValid() bool {
	_, err := ParseEndpointAuthMethod(string(x))
	return err == nil
}

var _EndpointAuthMethodValue = map[string]EndpointAuthMethod{
	"client_secret_basic": EndpointAuthMethodClientSecretBasic,
	"client_secret_post":  EndpointAuthMethodClientSecretPost,
}

// ParseEndpointAuthMethod attempts to convert a string to a EndpointAuthMethod.
func ParseEndpointAuthMethod(name string) (EndpointAuthMethod, error) {
	if x, ok := _EndpointAuthMethodValue[name]; ok {
		return x, nil
	}
	return EndpointAuthMethod(""), fmt.Errorf("%s is %w", name, ErrInvalidEndpointAuthMethod)
}

// MarshalText implements the text marshaller method.
func (x EndpointAuthMethod) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *EndpointAuthMethod) UnmarshalText(text []byte) error {
	tmp, err := ParseEndpointAuthMethod(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
