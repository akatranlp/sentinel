// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// IDTokenSigningAlgValueRS256 is a IDTokenSigningAlgValue of type RS256.
	IDTokenSigningAlgValueRS256 IDTokenSigningAlgValue = "RS256"
)

var ErrInvalidIDTokenSigningAlgValue = errors.New("not a valid IDTokenSigningAlgValue")

// IDTokenSigningAlgValueValues returns a list of the values for IDTokenSigningAlgValue
func IDTokenSigningAlgValueValues() []IDTokenSigningAlgValue {
	return []IDTokenSigningAlgValue{
		IDTokenSigningAlgValueRS256,
	}
}

// String implements the Stringer interface.
func (x IDTokenSigningAlgValue) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IDTokenSigningAlgValue) IsValid() bool {
	_, err := ParseIDTokenSigningAlgValue(string(x))
	return err == nil
}

var _IDTokenSigningAlgValueValue = map[string]IDTokenSigningAlgValue{
	"RS256": IDTokenSigningAlgValueRS256,
}

// ParseIDTokenSigningAlgValue attempts to convert a string to a IDTokenSigningAlgValue.
func ParseIDTokenSigningAlgValue(name string) (IDTokenSigningAlgValue, error) {
	if x, ok := _IDTokenSigningAlgValueValue[name]; ok {
		return x, nil
	}
	return IDTokenSigningAlgValue(""), fmt.Errorf("%s is %w", name, ErrInvalidIDTokenSigningAlgValue)
}

// MarshalText implements the text marshaller method.
func (x IDTokenSigningAlgValue) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *IDTokenSigningAlgValue) UnmarshalText(text []byte) error {
	tmp, err := ParseIDTokenSigningAlgValue(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
