// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// SubjectTypePublic is a SubjectType of type public.
	SubjectTypePublic SubjectType = "public"
)

var ErrInvalidSubjectType = errors.New("not a valid SubjectType")

// SubjectTypeValues returns a list of the values for SubjectType
func SubjectTypeValues() []SubjectType {
	return []SubjectType{
		SubjectTypePublic,
	}
}

// String implements the Stringer interface.
func (x SubjectType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SubjectType) IsValid() bool {
	_, err := ParseSubjectType(string(x))
	return err == nil
}

var _SubjectTypeValue = map[string]SubjectType{
	"public": SubjectTypePublic,
}

// ParseSubjectType attempts to convert a string to a SubjectType.
func ParseSubjectType(name string) (SubjectType, error) {
	if x, ok := _SubjectTypeValue[name]; ok {
		return x, nil
	}
	return SubjectType(""), fmt.Errorf("%s is %w", name, ErrInvalidSubjectType)
}

// MarshalText implements the text marshaller method.
func (x SubjectType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *SubjectType) UnmarshalText(text []byte) error {
	tmp, err := ParseSubjectType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
