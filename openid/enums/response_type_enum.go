// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package enums

import (
	"errors"
	"fmt"
)

const (
	// ResponseTypeCode is a ResponseType of type code.
	ResponseTypeCode ResponseType = "code"
)

var ErrInvalidResponseType = errors.New("not a valid ResponseType")

// ResponseTypeValues returns a list of the values for ResponseType
func ResponseTypeValues() []ResponseType {
	return []ResponseType{
		ResponseTypeCode,
	}
}

// String implements the Stringer interface.
func (x ResponseType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ResponseType) IsValid() bool {
	_, err := ParseResponseType(string(x))
	return err == nil
}

var _ResponseTypeValue = map[string]ResponseType{
	"code": ResponseTypeCode,
}

// ParseResponseType attempts to convert a string to a ResponseType.
func ParseResponseType(name string) (ResponseType, error) {
	if x, ok := _ResponseTypeValue[name]; ok {
		return x, nil
	}
	return ResponseType(""), fmt.Errorf("%s is %w", name, ErrInvalidResponseType)
}

// MarshalText implements the text marshaller method.
func (x ResponseType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *ResponseType) UnmarshalText(text []byte) error {
	tmp, err := ParseResponseType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
