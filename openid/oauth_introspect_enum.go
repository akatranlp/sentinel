// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package openid

import (
	"errors"
	"fmt"
)

const (
	// IntrospectFormValueToken is a IntrospectFormValue of type token.
	IntrospectFormValueToken IntrospectFormValue = "token"
	// IntrospectFormValueTokenHint is a IntrospectFormValue of type token_hint.
	IntrospectFormValueTokenHint IntrospectFormValue = "token_hint"
	// IntrospectFormValueClientId is a IntrospectFormValue of type client_id.
	IntrospectFormValueClientId IntrospectFormValue = "client_id"
	// IntrospectFormValueClientSecret is a IntrospectFormValue of type client_secret.
	IntrospectFormValueClientSecret IntrospectFormValue = "client_secret"
)

var ErrInvalidIntrospectFormValue = errors.New("not a valid IntrospectFormValue")

// String implements the Stringer interface.
func (x IntrospectFormValue) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IntrospectFormValue) IsValid() bool {
	_, err := ParseIntrospectFormValue(string(x))
	return err == nil
}

var _IntrospectFormValueValue = map[string]IntrospectFormValue{
	"token":         IntrospectFormValueToken,
	"token_hint":    IntrospectFormValueTokenHint,
	"client_id":     IntrospectFormValueClientId,
	"client_secret": IntrospectFormValueClientSecret,
}

// ParseIntrospectFormValue attempts to convert a string to a IntrospectFormValue.
func ParseIntrospectFormValue(name string) (IntrospectFormValue, error) {
	if x, ok := _IntrospectFormValueValue[name]; ok {
		return x, nil
	}
	return IntrospectFormValue(""), fmt.Errorf("%s is %w", name, ErrInvalidIntrospectFormValue)
}

// MarshalText implements the text marshaller method.
func (x IntrospectFormValue) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *IntrospectFormValue) UnmarshalText(text []byte) error {
	tmp, err := ParseIntrospectFormValue(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
