// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package openid

import (
	"errors"
	"fmt"
)

const (
	// AuthorizeErrorTypeInvalidRequest is a AuthorizeErrorType of type invalid_request.
	AuthorizeErrorTypeInvalidRequest AuthorizeErrorType = "invalid_request"
	// AuthorizeErrorTypeUnauthorizedClient is a AuthorizeErrorType of type unauthorized_client.
	AuthorizeErrorTypeUnauthorizedClient AuthorizeErrorType = "unauthorized_client"
	// AuthorizeErrorTypeAccessDenied is a AuthorizeErrorType of type access_denied.
	AuthorizeErrorTypeAccessDenied AuthorizeErrorType = "access_denied"
	// AuthorizeErrorTypeUnsupportedResponseType is a AuthorizeErrorType of type unsupported_response_type.
	AuthorizeErrorTypeUnsupportedResponseType AuthorizeErrorType = "unsupported_response_type"
	// AuthorizeErrorTypeInvalidScope is a AuthorizeErrorType of type invalid_scope.
	AuthorizeErrorTypeInvalidScope AuthorizeErrorType = "invalid_scope"
	// AuthorizeErrorTypeServerError is a AuthorizeErrorType of type server_error.
	AuthorizeErrorTypeServerError AuthorizeErrorType = "server_error"
	// AuthorizeErrorTypeInteractionRequired is a AuthorizeErrorType of type interaction_required.
	AuthorizeErrorTypeInteractionRequired AuthorizeErrorType = "interaction_required"
	// AuthorizeErrorTypeLoginRequired is a AuthorizeErrorType of type login_required.
	AuthorizeErrorTypeLoginRequired AuthorizeErrorType = "login_required"
	// AuthorizeErrorTypeAccountSelectionRequired is a AuthorizeErrorType of type account_selection_required.
	AuthorizeErrorTypeAccountSelectionRequired AuthorizeErrorType = "account_selection_required"
	// AuthorizeErrorTypeConsentRequired is a AuthorizeErrorType of type consent_required.
	AuthorizeErrorTypeConsentRequired AuthorizeErrorType = "consent_required"
	// AuthorizeErrorTypeInvalidRequestUri is a AuthorizeErrorType of type invalid_request_uri.
	AuthorizeErrorTypeInvalidRequestUri AuthorizeErrorType = "invalid_request_uri"
	// AuthorizeErrorTypeInvalidRequestObject is a AuthorizeErrorType of type invalid_request_object.
	AuthorizeErrorTypeInvalidRequestObject AuthorizeErrorType = "invalid_request_object"
	// AuthorizeErrorTypeRequetsNotSupported is a AuthorizeErrorType of type requets_not_supported.
	AuthorizeErrorTypeRequetsNotSupported AuthorizeErrorType = "requets_not_supported"
	// AuthorizeErrorTypeRequestUriNotSupported is a AuthorizeErrorType of type request_uri_not_supported.
	AuthorizeErrorTypeRequestUriNotSupported AuthorizeErrorType = "request_uri_not_supported"
	// AuthorizeErrorTypeRegistrationNotSupported is a AuthorizeErrorType of type registration_not_supported.
	AuthorizeErrorTypeRegistrationNotSupported AuthorizeErrorType = "registration_not_supported"
)

var ErrInvalidAuthorizeErrorType = errors.New("not a valid AuthorizeErrorType")

// String implements the Stringer interface.
func (x AuthorizeErrorType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AuthorizeErrorType) IsValid() bool {
	_, err := ParseAuthorizeErrorType(string(x))
	return err == nil
}

var _AuthorizeErrorTypeValue = map[string]AuthorizeErrorType{
	"invalid_request":            AuthorizeErrorTypeInvalidRequest,
	"unauthorized_client":        AuthorizeErrorTypeUnauthorizedClient,
	"access_denied":              AuthorizeErrorTypeAccessDenied,
	"unsupported_response_type":  AuthorizeErrorTypeUnsupportedResponseType,
	"invalid_scope":              AuthorizeErrorTypeInvalidScope,
	"server_error":               AuthorizeErrorTypeServerError,
	"interaction_required":       AuthorizeErrorTypeInteractionRequired,
	"login_required":             AuthorizeErrorTypeLoginRequired,
	"account_selection_required": AuthorizeErrorTypeAccountSelectionRequired,
	"consent_required":           AuthorizeErrorTypeConsentRequired,
	"invalid_request_uri":        AuthorizeErrorTypeInvalidRequestUri,
	"invalid_request_object":     AuthorizeErrorTypeInvalidRequestObject,
	"requets_not_supported":      AuthorizeErrorTypeRequetsNotSupported,
	"request_uri_not_supported":  AuthorizeErrorTypeRequestUriNotSupported,
	"registration_not_supported": AuthorizeErrorTypeRegistrationNotSupported,
}

// ParseAuthorizeErrorType attempts to convert a string to a AuthorizeErrorType.
func ParseAuthorizeErrorType(name string) (AuthorizeErrorType, error) {
	if x, ok := _AuthorizeErrorTypeValue[name]; ok {
		return x, nil
	}
	return AuthorizeErrorType(""), fmt.Errorf("%s is %w", name, ErrInvalidAuthorizeErrorType)
}

// MarshalText implements the text marshaller method.
func (x AuthorizeErrorType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AuthorizeErrorType) UnmarshalText(text []byte) error {
	tmp, err := ParseAuthorizeErrorType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// AuthorizeFormValueClientId is a AuthorizeFormValue of type client_id.
	AuthorizeFormValueClientId AuthorizeFormValue = "client_id"
	// AuthorizeFormValueRedirectUri is a AuthorizeFormValue of type redirect_uri.
	AuthorizeFormValueRedirectUri AuthorizeFormValue = "redirect_uri"
	// AuthorizeFormValueScope is a AuthorizeFormValue of type scope.
	AuthorizeFormValueScope AuthorizeFormValue = "scope"
	// AuthorizeFormValueResponseType is a AuthorizeFormValue of type response_type.
	AuthorizeFormValueResponseType AuthorizeFormValue = "response_type"
	// AuthorizeFormValueResponseMode is a AuthorizeFormValue of type response_mode.
	AuthorizeFormValueResponseMode AuthorizeFormValue = "response_mode"
	// AuthorizeFormValueState is a AuthorizeFormValue of type state.
	AuthorizeFormValueState AuthorizeFormValue = "state"
	// AuthorizeFormValueNonce is a AuthorizeFormValue of type nonce.
	AuthorizeFormValueNonce AuthorizeFormValue = "nonce"
	// AuthorizeFormValueCodeChallenge is a AuthorizeFormValue of type code_challenge.
	AuthorizeFormValueCodeChallenge AuthorizeFormValue = "code_challenge"
	// AuthorizeFormValueCodeChallengeMethod is a AuthorizeFormValue of type code_challenge_method.
	AuthorizeFormValueCodeChallengeMethod AuthorizeFormValue = "code_challenge_method"
)

var ErrInvalidAuthorizeFormValue = errors.New("not a valid AuthorizeFormValue")

// String implements the Stringer interface.
func (x AuthorizeFormValue) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AuthorizeFormValue) IsValid() bool {
	_, err := ParseAuthorizeFormValue(string(x))
	return err == nil
}

var _AuthorizeFormValueValue = map[string]AuthorizeFormValue{
	"client_id":             AuthorizeFormValueClientId,
	"redirect_uri":          AuthorizeFormValueRedirectUri,
	"scope":                 AuthorizeFormValueScope,
	"response_type":         AuthorizeFormValueResponseType,
	"response_mode":         AuthorizeFormValueResponseMode,
	"state":                 AuthorizeFormValueState,
	"nonce":                 AuthorizeFormValueNonce,
	"code_challenge":        AuthorizeFormValueCodeChallenge,
	"code_challenge_method": AuthorizeFormValueCodeChallengeMethod,
}

// ParseAuthorizeFormValue attempts to convert a string to a AuthorizeFormValue.
func ParseAuthorizeFormValue(name string) (AuthorizeFormValue, error) {
	if x, ok := _AuthorizeFormValueValue[name]; ok {
		return x, nil
	}
	return AuthorizeFormValue(""), fmt.Errorf("%s is %w", name, ErrInvalidAuthorizeFormValue)
}

// MarshalText implements the text marshaller method.
func (x AuthorizeFormValue) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AuthorizeFormValue) UnmarshalText(text []byte) error {
	tmp, err := ParseAuthorizeFormValue(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
