// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package openid

import (
	"errors"
	"fmt"
)

const (
	// LogoutFormValueClientId is a LogoutFormValue of type client_id.
	LogoutFormValueClientId LogoutFormValue = "client_id"
	// LogoutFormValueIdTokenHint is a LogoutFormValue of type id_token_hint.
	LogoutFormValueIdTokenHint LogoutFormValue = "id_token_hint"
	// LogoutFormValuePostLogoutRedirectUri is a LogoutFormValue of type post_logout_redirect_uri.
	LogoutFormValuePostLogoutRedirectUri LogoutFormValue = "post_logout_redirect_uri"
	// LogoutFormValueState is a LogoutFormValue of type state.
	LogoutFormValueState LogoutFormValue = "state"
)

var ErrInvalidLogoutFormValue = errors.New("not a valid LogoutFormValue")

// String implements the Stringer interface.
func (x LogoutFormValue) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LogoutFormValue) IsValid() bool {
	_, err := ParseLogoutFormValue(string(x))
	return err == nil
}

var _LogoutFormValueValue = map[string]LogoutFormValue{
	"client_id":                LogoutFormValueClientId,
	"id_token_hint":            LogoutFormValueIdTokenHint,
	"post_logout_redirect_uri": LogoutFormValuePostLogoutRedirectUri,
	"state":                    LogoutFormValueState,
}

// ParseLogoutFormValue attempts to convert a string to a LogoutFormValue.
func ParseLogoutFormValue(name string) (LogoutFormValue, error) {
	if x, ok := _LogoutFormValueValue[name]; ok {
		return x, nil
	}
	return LogoutFormValue(""), fmt.Errorf("%s is %w", name, ErrInvalidLogoutFormValue)
}

// MarshalText implements the text marshaller method.
func (x LogoutFormValue) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *LogoutFormValue) UnmarshalText(text []byte) error {
	tmp, err := ParseLogoutFormValue(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
