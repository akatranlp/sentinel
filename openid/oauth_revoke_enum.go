// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package openid

import (
	"errors"
	"fmt"
)

const (
	// RevokeFormValueClientId is a RevokeFormValue of type client_id.
	RevokeFormValueClientId RevokeFormValue = "client_id"
	// RevokeFormValueClientSecret is a RevokeFormValue of type client_secret.
	RevokeFormValueClientSecret RevokeFormValue = "client_secret"
	// RevokeFormValueToken is a RevokeFormValue of type token.
	RevokeFormValueToken RevokeFormValue = "token"
	// RevokeFormValueTokenHint is a RevokeFormValue of type token_hint.
	RevokeFormValueTokenHint RevokeFormValue = "token_hint"
)

var ErrInvalidRevokeFormValue = errors.New("not a valid RevokeFormValue")

// String implements the Stringer interface.
func (x RevokeFormValue) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x RevokeFormValue) IsValid() bool {
	_, err := ParseRevokeFormValue(string(x))
	return err == nil
}

var _RevokeFormValueValue = map[string]RevokeFormValue{
	"client_id":     RevokeFormValueClientId,
	"client_secret": RevokeFormValueClientSecret,
	"token":         RevokeFormValueToken,
	"token_hint":    RevokeFormValueTokenHint,
}

// ParseRevokeFormValue attempts to convert a string to a RevokeFormValue.
func ParseRevokeFormValue(name string) (RevokeFormValue, error) {
	if x, ok := _RevokeFormValueValue[name]; ok {
		return x, nil
	}
	return RevokeFormValue(""), fmt.Errorf("%s is %w", name, ErrInvalidRevokeFormValue)
}

// MarshalText implements the text marshaller method.
func (x RevokeFormValue) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *RevokeFormValue) UnmarshalText(text []byte) error {
	tmp, err := ParseRevokeFormValue(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
